// Generated by CoffeeScript 1.3.3
(function() {
  var App, AppView, Buffer, BufferTabView, BufferUser, BufferUserView, BufferUsers, BufferUsersView, BufferView, Buffers, Client, ClientView, DOMBuilder, EventHandler, LoginView, Message, MessageView, Messages, Network, NetworkInfoView, NetworkUser, NetworkUsers, NetworkView, WaffleRouter,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Message = (function(_super) {

    __extends(Message, _super);

    function Message() {
      this.getFlag = __bind(this.getFlag, this);

      this.setFlag = __bind(this.setFlag, this);

      this.getTimestamp = __bind(this.getTimestamp, this);

      this.getNick = __bind(this.getNick, this);
      return Message.__super__.constructor.apply(this, arguments);
    }

    Message.prototype.defaults = {
      'marked': false
    };

    Message.prototype.getNick = function() {
      return this.get('sender').split('!', 1)[0];
    };

    Message.prototype.getTimestamp = function() {
      return new XDate(this.get('timestamp') * 1000);
    };

    Message.prototype.setFlag = function(flag) {
      var flags;
      flags = this.get('flags');
      flags[flag] = true;
      return this.set('flags', flags);
    };

    Message.prototype.getFlag = function(flag) {
      var flags;
      flags = this.get('flags');
      return flags[flag];
    };

    return Message;

  })(Backbone.Model);

  MessageView = (function(_super) {

    __extends(MessageView, _super);

    function MessageView() {
      this.updateMarker = __bind(this.updateMarker, this);

      this.render = __bind(this.render, this);
      return MessageView.__super__.constructor.apply(this, arguments);
    }

    MessageView.prototype.tagName = 'div';

    MessageView.prototype.className = 'msg';

    MessageView.prototype.templates = {
      plain: _.template($('#message-template').html()),
      action: _.template($('#message-action-template').html()),
      nick: _.template($('#message-nick-template').html()),
      mode: _.template($('#message-mode-template').html()),
      join: _.template($('#message-join-template').html()),
      part: _.template($('#message-part-template').html()),
      quit: _.template($('#message-quit-template').html()),
      kick: _.template($('#message-kick-template').html()),
      topic: _.template($('#message-topic-template').html())
    };

    MessageView.prototype.initialize = function() {
      return this.model.on('change:marked', this.updateMarker);
    };

    MessageView.prototype.render = function() {
      var classes, flag, flags, json, messageType, template;
      json = this.model.toJSON();
      json.nick = this.model.getNick();
      json.timestamp = this.model.getTimestamp();
      messageType = this.model.get('type');
      template = this.templates[messageType];
      if (!(template != null)) {
        template = this.templates['plain'];
      }
      this.$el.html(template(json));
      flags = _.without(_.set(this.model.get('flags'), 'self'));
      classes = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = flags.length; _i < _len; _i++) {
          flag = flags[_i];
          _results.push('is-msg-flag-' + flag);
        }
        return _results;
      })();
      classes.push('is-msg-type-' + messageType);
      this.$el.addClass(classes.join(' '));
      return this;
    };

    MessageView.prototype.updateMarker = function(model, value, options) {
      console.log('MessageView.updateMarker');
      console.log(value);
      if (value) {
        return this.$el.addClass('is-msg-marker');
      } else {
        return this.$el.removeClass('is-msg-marker');
      }
    };

    return MessageView;

  })(Backbone.View);

  Messages = (function(_super) {

    __extends(Messages, _super);

    function Messages() {
      return Messages.__super__.constructor.apply(this, arguments);
    }

    Messages.prototype.model = Message;

    return Messages;

  })(Backbone.Collection);

  NetworkUser = (function(_super) {

    __extends(NetworkUser, _super);

    function NetworkUser() {
      return NetworkUser.__super__.constructor.apply(this, arguments);
    }

    NetworkUser.prototype.defaults = {
      channels: [],
      nick: ''
    };

    return NetworkUser;

  })(Backbone.Model);

  NetworkUsers = (function(_super) {

    __extends(NetworkUsers, _super);

    function NetworkUsers() {
      this.getByNick = __bind(this.getByNick, this);

      this.nickChanged = __bind(this.nickChanged, this);

      this.removeUser = __bind(this.removeUser, this);

      this._removeUser = __bind(this._removeUser, this);

      this.addUser = __bind(this.addUser, this);

      this._addUser = __bind(this._addUser, this);
      return NetworkUsers.__super__.constructor.apply(this, arguments);
    }

    NetworkUsers.prototype.model = NetworkUser;

    NetworkUsers.prototype.initialize = function() {
      this._byNick = {};
      this.on('add', this.addUser);
      this.on('remove', this.removeUser);
      return this.on('change:nick', this.nickChanged);
    };

    NetworkUsers.prototype._addUser = function(model) {
      return this._byNick[model.get('nick')] = model;
    };

    NetworkUsers.prototype.addUser = function(model, collection) {
      return this._addUser(model);
    };

    NetworkUsers.prototype._removeUser = function(nick) {
      return delete this._byNick[nick];
    };

    NetworkUsers.prototype.removeUser = function(model, collection) {
      return this._removeUser(model.get('nick'));
    };

    NetworkUsers.prototype.nickChanged = function(model, value) {
      this._removeUser(model.previous('nick'));
      return this._addUser(model);
    };

    NetworkUsers.prototype.getByNick = function(nick) {
      return this._byNick[nick];
    };

    return NetworkUsers;

  })(Backbone.Collection);

  BufferUser = (function(_super) {

    __extends(BufferUser, _super);

    function BufferUser() {
      this.removeMode = __bind(this.removeMode, this);

      this.addMode = __bind(this.addMode, this);

      this.nickChanged = __bind(this.nickChanged, this);
      return BufferUser.__super__.constructor.apply(this, arguments);
    }

    BufferUser.prototype.initialize = function() {
      return this.get('networkUser').on('change:nick', this.nickChanged);
    };

    BufferUser.prototype.nickChanged = function(model, value) {
      console.log('nickChanged', model, value);
      return this.set('id', value);
    };

    BufferUser.prototype.addMode = function(mode) {
      var modes;
      modes = _.union(this.get('modes'), [mode]);
      return this.set('modes', modes);
    };

    BufferUser.prototype.removeMode = function(mode) {
      var modes;
      modes = _.without(this.get('modes'), mode);
      return this.set('modes', modes);
    };

    return BufferUser;

  })(Backbone.Model);

  BufferUserView = (function(_super) {

    __extends(BufferUserView, _super);

    function BufferUserView() {
      this.render = __bind(this.render, this);
      return BufferUserView.__super__.constructor.apply(this, arguments);
    }

    BufferUserView.prototype.tagName = 'li';

    BufferUserView.prototype.template = _.template($('#user-template').html());

    BufferUserView.prototype.initialize = function() {
      return this.model.on('change', this.render);
    };

    BufferUserView.prototype.render = function() {
      var user;
      user = this.model.toJSON();
      user.prefixes = this.modesToPrefixes(user.modes);
      this.$el.html(this.template(user));
      return this;
    };

    return BufferUserView;

  })(Backbone.View);

  BufferUsers = (function(_super) {

    __extends(BufferUsers, _super);

    function BufferUsers() {
      return BufferUsers.__super__.constructor.apply(this, arguments);
    }

    BufferUsers.prototype.model = BufferUser;

    BufferUsers.prototype.comparator = function(user) {
      return user.id;
    };

    return BufferUsers;

  })(Backbone.Collection);

  BufferUsersView = (function(_super) {

    __extends(BufferUsersView, _super);

    function BufferUsersView() {
      this.render = __bind(this.render, this);
      return BufferUsersView.__super__.constructor.apply(this, arguments);
    }

    BufferUsersView.prototype.tagName = 'ul';

    BufferUsersView.prototype.initialize = function() {
      this.model.on('add', this.render);
      return this.model.on('remove', this.render);
    };

    BufferUsersView.prototype.render = function() {
      var _this = this;
      this.$el.empty();
      this.model.each(function(model) {
        var view;
        view = new BufferUserView({
          model: model
        });
        view.modesToPrefixes = function(modes) {
          return (_this.model.buffer.network.modesToPrefixes(modes)).join('');
        };
        return _this.$el.append(view.render().el);
      });
      return this;
    };

    return BufferUsersView;

  })(Backbone.View);

  Buffer = (function(_super) {

    __extends(Buffer, _super);

    function Buffer() {
      this.updateMarker = __bind(this.updateMarker, this);

      this.removeUser = __bind(this.removeUser, this);

      this.addUser = __bind(this.addUser, this);
      return Buffer.__super__.constructor.apply(this, arguments);
    }

    Buffer.prototype.defaults = {
      focus: false,
      hidden: false
    };

    Buffer.prototype.initialize = function() {
      this.messages = new Messages;
      this.users = new BufferUsers;
      this.users.buffer = this;
      this.users.on('add', this.addUser);
      return this.users.on('remove', this.removeUser);
    };

    Buffer.prototype.addUser = function(model, collection) {
      var channels, networkUser;
      networkUser = model.get('networkUser');
      channels = networkUser.get('channels');
      return networkUser.set('channels', _.union(channels, [this.get('name')]));
    };

    Buffer.prototype.removeUser = function(model, collection) {
      var channels, networkUser;
      networkUser = model.get('networkUser');
      channels = networkUser.get('channels');
      return networkUser.set('channels', _.without(channels, this.get('name')));
    };

    Buffer.prototype.updateMarker = function(messageId) {
      var message;
      console.log('updateMarker');
      console.log(messageId);
      if (this._markedMessage != null) {
        console.log('remove old marker');
        this._markedMessage.set('marked', false);
      }
      message = this.messages.get(messageId);
      if (message != null) {
        console.log('QWFQWF');
        message.set('marked', true);
        return this._markedMessage = message;
      }
    };

    return Buffer;

  })(Backbone.Model);

  BufferTabView = (function(_super) {

    __extends(BufferTabView, _super);

    function BufferTabView() {
      this.addMessage = __bind(this.addMessage, this);

      this._updateUnreadCount = __bind(this._updateUnreadCount, this);

      this.removeBuffer = __bind(this.removeBuffer, this);

      this.hiddenChanged = __bind(this.hiddenChanged, this);

      this.focusChanged = __bind(this.focusChanged, this);

      this.hideBuffer = __bind(this.hideBuffer, this);

      this.focused = __bind(this.focused, this);

      this.render = __bind(this.render, this);
      return BufferTabView.__super__.constructor.apply(this, arguments);
    }

    BufferTabView.prototype.template = _.template($('#buffer-tab-template').html());

    BufferTabView.prototype.events = {
      'click': 'focused',
      'click button.close': 'hideBuffer'
    };

    BufferTabView.prototype.initialize = function() {
      this._unreadCounts = {};
      this.model.on('change:hidden change:silent', this.hiddenChanged);
      this.model.on('change:focus', this.focusChanged);
      return this.model.messages.on('add', this.addMessage);
    };

    BufferTabView.prototype.render = function() {
      var bufferType, name;
      bufferType = this.model.get('type');
      switch (bufferType) {
        case 'status':
          name = '<status>';
          break;
        case 'channel':
          name = this.model.get('name');
          break;
        case 'query':
          name = this.model.get('name');
          break;
        default:
          throw new Error("Unknown buffer type: " + bufferType);
      }
      this.setElement(this.template({
        id: this.model.id,
        name: name
      }));
      return this;
    };

    BufferTabView.prototype.focused = function(event) {
      console.log('FOCUSED!!!');
      return this.model.set('focus', true);
    };

    BufferTabView.prototype.hideBuffer = function(event) {
      this.model.protocol.send('hideBuffer', {
        bufferId: this.model.id
      });
      return false;
    };

    BufferTabView.prototype.focusChanged = function(model, value) {
      if (value) {
        this._updateUnreadCount('plain', 0);
        return this._updateUnreadCount('highlight', 0);
      }
    };

    BufferTabView.prototype.hiddenChanged = function(model, value) {
      if (value) {
        return this.$el.hide();
      } else {
        return this.$el.show();
      }
    };

    BufferTabView.prototype.removeBuffer = function(model, collection) {
      console.log('BufferTabView.removeBuffer');
      return this.remove();
    };

    BufferTabView.prototype._updateUnreadCount = function(type, count) {
      if (count != null) {
        this._unreadCounts[type] = count;
      } else {
        if (!(this._unreadCounts[type] != null)) {
          this._unreadCounts[type] = 0;
        }
        this._unreadCounts[type] += 1;
      }
      return this.$(".is-" + type + "-count").text(this._unreadCounts[type]);
    };

    BufferTabView.prototype.addMessage = function(model, collection) {
      if (this.model.get('hidden')) {
        this.model.set('hidden', false);
        this.model.protocol.send('unhideBuffer', {
          bufferId: this.model.id,
          index: collection.length
        });
      }
      if (!model.getFlag('backlog')) {
        if (model.getFlag('highlight')) {
          this._updateUnreadCount('highlight');
        }
        return this._updateUnreadCount('plain');
      }
    };

    return BufferTabView;

  })(Backbone.View);

  BufferView = (function(_super) {

    __extends(BufferView, _super);

    function BufferView() {
      this.keypress = __bind(this.keypress, this);

      this.topicChanged = __bind(this.topicChanged, this);

      this.focusChanged = __bind(this.focusChanged, this);

      this.addMessage = __bind(this.addMessage, this);

      this.render = __bind(this.render, this);
      return BufferView.__super__.constructor.apply(this, arguments);
    }

    BufferView.prototype.template = _.template($('#buffer-template').html());

    BufferView.prototype.events = {
      'submit form': 'keypress'
    };

    BufferView.prototype.initialize = function() {
      this.model.on('change:topic', this.topicChanged);
      this.model.on('change:focus', this.focusChanged);
      return this.model.messages.on('add', this.addMessage);
    };

    BufferView.prototype.render = function() {
      var view;
      console.log('BufferView.render');
      this.setElement(this.template({
        id: this.model.id
      }));
      view = new BufferUsersView({
        model: this.model.users
      });
      this.$('.buffer-userlist').html(view.render().el);
      return this;
    };

    BufferView.prototype.addMessage = function(model, collection) {
      var view;
      console.log('XXX!!! addMessage');
      view = new MessageView({
        model: model
      });
      return this.$('.buffer-content').append(view.render().el);
    };

    BufferView.prototype.focusChanged = function(model, value) {
      console.log('view:focusChanged', model.get('name'), value);
      if (!value) {
        return console.log('updateMarkerAndLastSeenKTHX');
      }
    };

    BufferView.prototype.topicChanged = function(model, value) {
      console.log('XXX!!! topicChanged');
      return this.$('.buffer-topic').text(value);
    };

    BufferView.prototype.keypress = function(event) {
      var bufferInput, message;
      console.log('keypress');
      console.log(event);
      bufferInput = this.$('.buffer-input');
      message = bufferInput.val();
      this.model.protocol.send('sendInput', {
        message: message,
        bufferInfo: this.model.toJSON()
      });
      bufferInput.val('');
      return false;
    };

    return BufferView;

  })(Backbone.View);

  Buffers = (function(_super) {

    __extends(Buffers, _super);

    function Buffers() {
      this.getByName = __bind(this.getByName, this);

      this.focusChanged = __bind(this.focusChanged, this);

      this.removeBuffer = __bind(this.removeBuffer, this);

      this.addBuffer = __bind(this.addBuffer, this);
      return Buffers.__super__.constructor.apply(this, arguments);
    }

    Buffers.prototype.model = Buffer;

    Buffers.prototype.initialize = function() {
      this._byName = {};
      this.on('change:focus', this.focusChanged);
      this.on('add', this.addBuffer);
      return this.on('remove', this.removeBuffer);
    };

    Buffers.prototype.comparator = function(model) {
      return model.get('name');
    };

    Buffers.prototype.addBuffer = function(model, collection) {
      return this._byName[model.get('name')] = model;
    };

    Buffers.prototype.removeBuffer = function(model, collection) {
      return delete this._byName[model.get('name')];
    };

    Buffers.prototype.focusChanged = function(model, value) {
      var _ref;
      console.log('buffers:focusChanged', model.get('name'), value);
      if ((_ref = this._previouslyFocused) != null) {
        _ref.set('focus', false);
      }
      return this._previouslyFocused = model;
    };

    Buffers.prototype.getByName = function(name) {
      return this._byName[name];
    };

    return Buffers;

  })(Backbone.Collection);

  Network = (function(_super) {

    __extends(Network, _super);

    function Network() {
      this.modesToPrefixes = __bind(this.modesToPrefixes, this);

      this.isSelf = __bind(this.isSelf, this);

      this.checkForHighlight = __bind(this.checkForHighlight, this);

      this.processMessage = __bind(this.processMessage, this);

      this.addBuffer = __bind(this.addBuffer, this);

      this.removeUser = __bind(this.removeUser, this);

      this._updateFeatures = __bind(this._updateFeatures, this);
      return Network.__super__.constructor.apply(this, arguments);
    }

    Network.prototype.defaults = {
      latency: 0
    };

    Network.prototype.initialize = function() {
      this.on('change:features', this._updateFeatures);
      this.users = new NetworkUsers;
      this.users.on('remove', this.removeUser);
      this.buffers = new Buffers;
      return this.buffers.on('add', this.addBuffer);
    };

    Network.prototype._updateFeatures = function(model, value, options) {
      return this._prefixMapping = this._buildPrefixMapping(value.PREFIX);
    };

    Network.prototype._buildPrefixMapping = function(feature) {
      /*
              Build a mapping of channel user mode to prefix.
      */

      var modes, symbols, _ref;
      _ref = feature.substr(1).split(')'), modes = _ref[0], symbols = _ref[1];
      return _.toMapping(_.zip(modes, symbols));
    };

    Network.prototype.removeUser = function(model, collection) {
      var buffer, bufferName, bufferUser, nickname, _i, _len, _ref, _results;
      nickname = model.get('nick');
      _ref = model.get('channels');
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        bufferName = _ref[_i];
        buffer = this.buffers.getByName(bufferName);
        bufferUser = buffer.users.get(nickname);
        _results.push(buffer.users.remove([bufferUser]));
      }
      return _results;
    };

    Network.prototype.addBuffer = function(model, collection) {
      return model.messages.on('add', this.processMessage);
    };

    Network.prototype.processMessage = function(model, collection) {
      return this.checkForHighlight(model);
    };

    Network.prototype.checkForHighlight = function(message) {
      var myNick, nickMatch;
      if (message.get('type') !== 'plain') {
        return;
      }
      myNick = this.get('myNick');
      if (myNick.length <= 0) {
        return;
      }
      nickMatch = new RegExp('\\b' + myNick + '\\b');
      if (nickMatch.test(message.get('content'))) {
        return message.setFlag('highlight');
      }
    };

    Network.prototype.isSelf = function(nickname) {
      return this.get('myNick') === nickname;
    };

    Network.prototype.modesToPrefixes = function(modes) {
      return _.values(_.pick(this._prefixMapping, modes));
    };

    return Network;

  })(Backbone.Model);

  NetworkInfoView = (function(_super) {

    __extends(NetworkInfoView, _super);

    function NetworkInfoView() {
      this.render = __bind(this.render, this);
      return NetworkInfoView.__super__.constructor.apply(this, arguments);
    }

    NetworkInfoView.prototype.template = _.template($('#network-info-template').html());

    NetworkInfoView.prototype.initialize = function() {
      return this.model.on('change', this.render);
    };

    NetworkInfoView.prototype.render = function() {
      this.$el.html(this.template(this.model.toJSON()));
      return this;
    };

    return NetworkInfoView;

  })(Backbone.View);

  NetworkView = (function(_super) {

    __extends(NetworkView, _super);

    function NetworkView() {
      this.addBuffer = __bind(this.addBuffer, this);

      this.render = __bind(this.render, this);
      return NetworkView.__super__.constructor.apply(this, arguments);
    }

    NetworkView.prototype.template = _.template($('#network-template').html());

    NetworkView.prototype.initialize = function() {
      return this.model.buffers.on('add', this.addBuffer);
    };

    NetworkView.prototype.render = function() {
      var view;
      console.log('NetworkView.render');
      this.$el.empty();
      view = new NetworkInfoView({
        model: this.model
      });
      this.$el.append(view.render().el);
      console.log(this.model.toJSON());
      this.$el.append(this.template(this.model.toJSON()));
      return this;
    };

    NetworkView.prototype.addBuffer = function(model, collection) {
      var bufferTabView, bufferView;
      console.log('NetworkView.addBuffer');
      bufferTabView = new BufferTabView({
        model: model
      });
      this.$('.buffer-tabs').append(bufferTabView.render().el);
      bufferView = new BufferView({
        model: model
      });
      return this.$('.buffer-contents').append(bufferView.render().el);
    };

    return NetworkView;

  })(Backbone.View);

  Client = (function(_super) {

    __extends(Client, _super);

    function Client() {
      this.getBufferById = __bind(this.getBufferById, this);
      return Client.__super__.constructor.apply(this, arguments);
    }

    Client.prototype.model = Network;

    Client.prototype.getBufferById = function(id) {
      var network,
        _this = this;
      network = this.find(function(network) {
        return network.buffers.get(id);
      });
      return network.buffers.get(id);
    };

    return Client;

  })(Backbone.Collection);

  ClientView = (function(_super) {

    __extends(ClientView, _super);

    function ClientView() {
      this.addNetwork = __bind(this.addNetwork, this);
      return ClientView.__super__.constructor.apply(this, arguments);
    }

    ClientView.prototype.initialize = function(client) {
      this.client = client;
      this.client.on('add', this.addNetwork);
      console.log('NIENIENIEN');
      return console.dir(this.model);
    };

    ClientView.prototype.addNetwork = function(model, collection) {
      var view;
      console.log('ClientView.addNetwork');
      view = new NetworkView({
        model: model
      });
      return this.$el.append(view.render().el);
    };

    return ClientView;

  })(Backbone.View);

  App = (function() {

    function App() {
      this.errorAlert = __bind(this.errorAlert, this);

      this.connect = __bind(this.connect, this);

    }

    App.prototype.templates = {
      errorAlert: _.template($('#error-alert-template').html())
    };

    App.prototype.connect = function(options) {
      var d, self, ws;
      d = $.Deferred();
      console.log('connect');
      console.log(options);
      this._eventHandler = new EventHandler(options.events);
      self = this;
      ws = $.websocket(options.url, {
        open: function() {
          console.log('open');
          self._eventHandler.protocol = ws;
          return ws.send('auth', {
            username: options.username,
            password: options.password
          });
        },
        close: function() {
          console.log('close');
          return self.errorAlert({
            heading: 'Connection closed',
            content: 'The WebSocket connection was closed.',
            button: 'Reconnect',
            click: function() {
              return self.connect(options);
            }
          });
        },
        error: function() {
          return console.log('error');
        },
        events: this._eventHandler
      });
      return d;
    };

    App.prototype.errorAlert = function(info) {
      var node;
      console.log('errorAlert');
      node = $(this.templates.errorAlert(info));
      if (info.click != null) {
        $('.btn-primary', node).bind('click', info.click);
      }
      return $('#notifications').append(node);
    };

    return App;

  })();

  AppView = (function(_super) {

    __extends(AppView, _super);

    function AppView() {
      return AppView.__super__.constructor.apply(this, arguments);
    }

    AppView.prototype.el = $('#app');

    AppView.prototype.replaceView = function(view) {
      view.render();
      if (this.currentView) {
        this.currentView.remove();
      }
      this.currentView = view;
      this.$el.empty();
      return this.$el.append(view.el);
    };

    return AppView;

  })(Backbone.View);

  EventHandler = (function() {

    function EventHandler(handler) {
      this.handler = handler;
      this.markerUpdated = __bind(this.markerUpdated, this);

      this.bufferRemoved = __bind(this.bufferRemoved, this);

      this.bufferAdded = __bind(this.bufferAdded, this);

      this.channelJoined = __bind(this.channelJoined, this);

      this.latencyUpdated = __bind(this.latencyUpdated, this);

      this.userParted = __bind(this.userParted, this);

      this.usersJoined = __bind(this.usersJoined, this);

      this.userQuit = __bind(this.userQuit, this);

      this.userConnected = __bind(this.userConnected, this);

      this.userSetMetadata = __bind(this.userSetMetadata, this);

      this.objectRenamed = __bind(this.objectRenamed, this);

      this.topicChanged = __bind(this.topicChanged, this);

      this.userModeRemoved = __bind(this.userModeRemoved, this);

      this.userModeAdded = __bind(this.userModeAdded, this);

      this.backlog = __bind(this.backlog, this);

      this.message = __bind(this.message, this);

      this._addMessage = __bind(this._addMessage, this);

      this.initializeBufferSyncer = __bind(this.initializeBufferSyncer, this);

      this.initializeNetwork = __bind(this.initializeNetwork, this);

      this._addUsers = __bind(this._addUsers, this);

      this.initializeBuffer = __bind(this.initializeBuffer, this);

      this._addBuffer = __bind(this._addBuffer, this);

      this.initializeBufferView = __bind(this.initializeBufferView, this);

      this.auth = __bind(this.auth, this);

      this._maxBufferId = 0;
    }

    EventHandler.prototype.auth = function(e) {
      var _base;
      console.log('event:auth');
      this.client = new Client;
      window.router.client = this.client;
      console.log(this.handler);
      return typeof (_base = this.handler).authenticated === "function" ? _base.authenticated() : void 0;
    };

    EventHandler.prototype.initializeBufferView = function(e) {
      var buffer, bufferId, bufferIds, bufferViewId, data, _i, _j, _len, _len1, _ref, _ref1, _ref2, _results;
      console.log('event:initializeBufferView');
      console.log(e);
      _ref = e.data, bufferViewId = _ref[0], data = _ref[1];
      bufferIds = _.union(data.BufferList, data.TemporarilyRemovedBuffers, data.RemovedBuffers);
      this._maxBufferId = _.max(bufferIds);
      _ref1 = data.TemporarilyRemovedBuffers;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        bufferId = _ref1[_i];
        buffer = this.client.getBufferById(bufferId);
        buffer.set('hidden', true);
      }
      _ref2 = data.RemovedBuffers;
      _results = [];
      for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
        bufferId = _ref2[_j];
        buffer = this.client.getBufferById(bufferId);
        _results.push(buffer.set('silent', true));
      }
      return _results;
    };

    EventHandler.prototype._addBuffer = function(bufferInfo) {
      var buffer, network;
      network = this.client.get(bufferInfo.networkId);
      if (!network) {
        network = new Network({
          id: bufferInfo.networkId
        });
        this.client.add([network]);
      }
      buffer = network.buffers.get(bufferInfo.id);
      if (!buffer) {
        console.log('addBuffer');
        buffer = new Buffer(bufferInfo);
        buffer.protocol = this.protocol;
        buffer.network = network;
        return network.buffers.add([buffer]);
      }
    };

    EventHandler.prototype.initializeBuffer = function(e) {
      console.log('event:initializeBuffer');
      return this._addBuffer(e.data);
    };

    EventHandler.prototype._addUsers = function(buffer, userModes) {
      var modes, networkUser, nickname, user, users, _i, _len, _ref;
      users = [];
      for (_i = 0, _len = userModes.length; _i < _len; _i++) {
        _ref = userModes[_i], nickname = _ref[0], modes = _ref[1];
        networkUser = buffer.network.users.getByNick(nickname);
        user = new BufferUser({
          id: nickname,
          networkUser: networkUser,
          modes: modes.split('')
        });
        users.push(user);
      }
      return buffer.users.add(users);
    };

    EventHandler.prototype.initializeNetwork = function(e) {
      var buffer, channel, data, host, info, network, networkId, user, users, _ref, _ref1, _ref2, _results;
      console.log('event:initializeNetwork');
      _ref = e.data, networkId = _ref[0], data = _ref[1];
      network = this.client.get(networkId);
      network.set({
        name: data.networkName,
        myNick: data.myNick,
        features: data.Supports,
        latency: data.latency
      });
      users = [];
      _ref1 = data.IrcUsersAndChannels.users;
      for (host in _ref1) {
        info = _ref1[host];
        info.id = host;
        user = new NetworkUser(info);
        users.push(user);
      }
      network.users.add(users);
      _ref2 = data.IrcUsersAndChannels.channels;
      _results = [];
      for (channel in _ref2) {
        info = _ref2[channel];
        buffer = network.buffers.getByName(channel);
        buffer.set('topic', info.topic);
        _results.push(this._addUsers(buffer, _.mappingItems(info.UserModes)));
      }
      return _results;
    };

    EventHandler.prototype.initializeBufferSyncer = function(e) {
      var buffer, bufferId, messageId, _i, _len, _ref, _ref1, _results;
      console.log('event:initializeBufferSyncer');
      _ref = e.data.markerLines;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        _ref1 = _ref[_i], bufferId = _ref1[0], messageId = _ref1[1];
        buffer = this.client.getBufferById(bufferId);
        _results.push(buffer.updateMarker(messageId));
      }
      return _results;
    };

    EventHandler.prototype._addMessage = function(messageInfo, backlog) {
      var buffer, msg, network;
      if (backlog == null) {
        backlog = false;
      }
      network = this.client.get(messageInfo.bufferInfo.networkId);
      buffer = network.buffers.get(messageInfo.bufferInfo.id);
      if (buffer != null) {
        msg = buffer.messages.get(messageInfo.id);
        if (!msg) {
          msg = new Message(messageInfo);
          if (backlog) {
            msg.setFlag('backlog');
          }
          return buffer.messages.add([msg]);
        }
      } else if (messageInfo.bufferInfo.type === 'query') {
        console.error('_addMessage failed, no such buffer', messageInfo.bufferInfo.id);
        console.dir(messageInfo);
        this._addBuffer(messageInfo.bufferInfo);
        return this._addMessage(messageInfo);
      }
    };

    EventHandler.prototype.message = function(e) {
      console.log('event:message');
      console.log(e);
      return this._addMessage(e.data);
    };

    EventHandler.prototype.backlog = function(e) {
      var messageInfo, _i, _len, _ref, _results;
      console.log('event:backlog');
      _ref = e.data;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        messageInfo = _ref[_i];
        _results.push(this._addMessage(messageInfo, true));
      }
      return _results;
    };

    EventHandler.prototype.userModeAdded = function(e) {
      var buffer, network, user;
      console.log('event:userModeAdded');
      console.log(e);
      network = this.client.get(e.data.networkId);
      buffer = network.buffers.getByName(e.data.bufferName);
      user = buffer.users.get(e.data.nickname);
      return user.addMode(e.data.mode);
    };

    EventHandler.prototype.userModeRemoved = function(e) {
      var buffer, modeInfo, network, user;
      console.log('event:userModeRemoved');
      console.log(e);
      modeInfo = e.data;
      network = this.client.get(modeInfo.networkId);
      buffer = network.buffers.getByName(modeInfo.bufferName);
      user = buffer.users.get(e.data.nickname);
      return user.removeMode(e.data.mode);
    };

    EventHandler.prototype.topicChanged = function(e) {
      var buffer, network;
      console.log('event:topicChanged');
      console.log(e);
      network = this.client.get(e.data.networkId);
      buffer = network.buffers.getByName(e.data.bufferName);
      return buffer.set('topic', e.data.topic);
    };

    EventHandler.prototype.objectRenamed = function(e) {
      var network, networkId, newNickname, oldNickname, user, _ref, _ref1;
      console.log('event:objectRenamed');
      console.log(e);
      _ref = e.data.old, networkId = _ref[0], oldNickname = _ref[1];
      _ref1 = e.data["new"], networkId = _ref1[0], newNickname = _ref1[1];
      network = this.client.get(networkId);
      user = network.users.getByNick(oldNickname);
      return user.set('nick', newNickname);
    };

    EventHandler.prototype.userSetMetadata = function(e) {
      var network, user;
      console.log('event:userSetMetadata');
      console.log(e);
      network = this.client.get(e.data.networkId);
      user = network.users.getByNick(e.data.nickname);
      return user.set(e.data.key, e.data.value);
    };

    EventHandler.prototype.userConnected = function(e) {
      var network, nick, user;
      console.log('event:userConnected');
      console.log(e);
      network = this.client.get(e.data.networkId);
      nick = e.data.host.split('!', 1);
      user = new NetworkUser({
        id: e.data.host,
        nick: nick
      });
      return network.users.add([user]);
    };

    EventHandler.prototype.userQuit = function(e) {
      var network, networkUser;
      console.log('event:userQuit');
      console.log(e);
      network = this.client.get(e.data.networkId);
      networkUser = network.users.getByNick(e.data.nickname);
      return network.users.remove([networkUser]);
    };

    EventHandler.prototype.usersJoined = function(e) {
      var buffer, network;
      console.log('event:usersJoined');
      console.log(e);
      network = this.client.get(e.data.networkId);
      buffer = network.buffers.getByName(e.data.bufferName);
      return this._addUsers(buffer, e.data.userModes);
    };

    EventHandler.prototype.userParted = function(e) {
      var buffer, network, user;
      console.log('event:userParted');
      console.log(e);
      network = this.client.get(e.data.networkId);
      buffer = network.buffers.getByName(e.data.bufferName);
      if (false) {
        console.log('self leaving');
        return network.buffers.remove([buffer]);
      } else {
        console.log('other leaving');
        user = buffer.users.get(e.data.nickname);
        return buffer.users.remove([user]);
      }
    };

    EventHandler.prototype.latencyUpdated = function(e) {
      var network;
      network = this.client.get(e.data.networkId);
      return network.set('latency', e.data.latency);
    };

    EventHandler.prototype.channelJoined = function(e) {
      console.log('event:channelJoined');
      console.log(e);
      return this._addBuffer({
        id: this._maxBufferId + 1,
        networkId: e.data.networkId,
        name: e.data.bufferName,
        type: 'channel'
      });
    };

    EventHandler.prototype.bufferAdded = function(e) {
      var buffer;
      console.log('event:bufferAdded');
      console.log(e);
      buffer = this.client.getBufferById(e.data.bufferId);
      return buffer.set({
        silent: false,
        hidden: false
      });
    };

    EventHandler.prototype.bufferRemoved = function(e) {
      var buffer;
      console.log('event:bufferRemoved');
      console.log(e);
      buffer = this.client.getBufferById(e.data.bufferId);
      if (e.data.permanent) {
        return buffer.set({
          silent: true
        });
      } else {
        return buffer.set({
          hidden: true
        });
      }
    };

    EventHandler.prototype.markerUpdated = function(e) {
      var buffer;
      console.log('event:markerUpdated');
      console.log(e);
      buffer = this.client.getBufferById(e.data.bufferId);
      return buffer.updateMarker(e.data.messageId);
    };

    return EventHandler;

  })();

  LoginView = (function(_super) {

    __extends(LoginView, _super);

    function LoginView() {
      this.render = __bind(this.render, this);
      return LoginView.__super__.constructor.apply(this, arguments);
    }

    LoginView.prototype.template = _.template($('#login-template').html());

    LoginView.prototype.events = {
      'click .js-connect': 'connect',
      'click .js-clear-storage': 'clearStorage'
    };

    LoginView.prototype.initialize = function(appView) {
      this.appView = appView;
      return this.app = this.appView.app;
    };

    LoginView.prototype.render = function() {
      var creds;
      creds = $.totalStorage('credentials');
      if (creds == null) {
        creds = {};
      }
      console.log('creds', creds);
      this.setElement(this.template());
      this.$('form').populateForm(creds);
      return this;
    };

    LoginView.prototype.connect = function() {
      var creds;
      creds = this.$('form').serializeForm();
      if (creds.store) {
        $.totalStorage('credentials', creds);
      }
      window.router._connect(creds);
      return false;
    };

    LoginView.prototype.clearStorage = function() {
      $.totalStorage('credentials', null);
      alert('cleared');
      return false;
    };

    return LoginView;

  })(Backbone.View);

  WaffleRouter = (function(_super) {

    __extends(WaffleRouter, _super);

    function WaffleRouter() {
      return WaffleRouter.__super__.constructor.apply(this, arguments);
    }

    WaffleRouter.prototype.routes = {
      '': 'chat',
      'connect': 'connect',
      'login': 'login'
    };

    WaffleRouter.prototype._connect = function(creds) {
      return this.appView.app.connect({
        url: 'wss://callisto.jsphere.com:8076',
        username: creds.username[0],
        password: creds.password[0],
        events: {
          authenticated: function() {
            console.log('AUTHENTICATED!!!!');
            return window.router.navigate('/', {
              trigger: true
            });
          },
          rejected: function() {
            return console.log('REJECTED!!!!');
          }
        }
      });
    };

    WaffleRouter.prototype.connect = function() {
      var creds;
      console.log('route:connect');
      creds = $.totalStorage('credentials');
      if (!(creds != null)) {
        window.router.navigate('login', {
          trigger: true
        });
        return;
      }
      return this._connect(creds);
    };

    WaffleRouter.prototype.chat = function() {
      var view;
      console.log('route:chat');
      if (!(this.client != null)) {
        console.log('QWFQWFYAURSNYAURNS uh oh');
        this.navigate('connect', {
          trigger: true,
          replace: true
        });
        return;
      }
      view = new ClientView(this.client);
      return this.appView.replaceView(view);
    };

    WaffleRouter.prototype.login = function() {
      var view;
      console.log('route:login');
      view = new LoginView(this.appView);
      return this.appView.replaceView(view);
    };

    return WaffleRouter;

  })(Backbone.Router);

  $(document).ready(function() {
    var app, appView;
    _.mixin({
      set: function(s) {
        var k, v, _results;
        _results = [];
        for (k in s) {
          v = s[k];
          if (v) {
            _results.push(k);
          }
        }
        return _results;
      },
      mappingItems: function(o) {
        return _.zip(_.keys(o), _.values(o));
      },
      toMapping: function(pairs) {
        var k, o, v, _i, _len, _ref;
        o = {};
        for (_i = 0, _len = pairs.length; _i < _len; _i++) {
          _ref = pairs[_i], k = _ref[0], v = _ref[1];
          o[k] = v;
        }
        return o;
      }
    });
    $.fn.serializeForm = function() {
      var o, x, _i, _len, _ref, _ref1;
      o = {};
      _ref = this.serializeArray();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        x = _ref[_i];
        if (o[x.name] != null) {
          o[x.name] = [];
        }
        o[x.name] = [(_ref1 = x.value) != null ? _ref1 : ''];
      }
      return o;
    };
    $.fn.populateForm = function(data) {
      var form, key, values;
      form = this;
      for (key in data) {
        values = data[key];
        form.find("[name='" + key + "']").val(values);
      }
      return this;
    };
    app = new App;
    appView = new AppView;
    appView.app = app;
    window.router = new WaffleRouter;
    router.appView = appView;
    return Backbone.history.start({
      pushState: true
    });
  });

  /*
  Factory factory function for DOM node generation.
  
  The returned factory accepts the tag name, mapping of attributes and an array of children. The attributes parameter may be omitted and the children may be a single value.
  
  Returns a jQuery object wrapping a DOM node.
  
  Examples:
  
  D = DOMBuilder()
  
  node = D 'div', class: 'foo', [
      D 'strong', 'Title',
      D 'span', [
          D 'em', 'hello ',
          D 'small', 'world']]
  
  
  <div class="foo">
      <strong>Title</strong>
      <span>
          <em>hello</em>
          <small>world</small>
      </span>
  </div>
  */


  DOMBuilder = function(doc) {
    if (doc == null) {
      doc = document;
    }
    return function(tagName, attrs, children) {
      var child, node, _i, _len;
      node = $(doc.createElement(tagName));
      if (attrs != null) {
        if (_.isObject(attrs && !_.isElement(attrs))) {
          node.attr(attrs);
        } else if (!(children != null)) {
          children = attrs;
        }
      }
      if (children != null) {
        if (!_.isArray(children)) {
          children = [children];
        }
        for (_i = 0, _len = children.length; _i < _len; _i++) {
          child = children[_i];
          if (_.isNumber(child)) {
            child = child.toString();
          }
          if (_.isString(child)) {
            child = doc.createTextNode(child);
          }
          node.append(child);
        }
      }
      return node;
    };
  };

}).call(this);
